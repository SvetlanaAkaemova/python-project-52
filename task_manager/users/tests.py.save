from django.test import TestCase
from django.test import TestCase
from django.urls import reverse
from task_manager.apps.users.models import User
from django.core.exceptions import ObjectDoesNotExist
from task_manager.utils.text import MessageForUser


messages = MessageForUser()


class UserTestCase(TestCase):
    fixtures = ['statuses.json', 'users.json',
                'tasks.json', 'labels.json']

    def setUp(self):
        self.user1 = User.objects.get(pk=1)
        self.user2 = User.objects.get(pk=2)
        self.user3 = User.objects.get(pk=3)
        self.users_list = reverse('users_list')
        self.login = reverse('login')
        self.form_data = {'username': 'NewName',
                          'last_name': 'L',
                          'first_name': 'F',
                          'password1': 'NewPassword123',
                          'password2': 'NewPassword123'}

    def test_users_list(self):
        response = self.client.get(reverse('users_list'))
        self.assertEqual(response.status_code, 200)
        response_tasks = list(response.context['users_list'])
        self.assertQuerysetEqual(response_tasks,
                                 [self.user1, self.user2,
                                  self.user3])

    def test_create_user(self):
        create_user = reverse('register')
        """ GET """
        get_response = self.client.get(create_user)
        self.assertEqual(get_response.status_code, 200)
        """ POST """
        post_response = self.client.post(create_user,
                                         self.form_data, follow=True)
        self.assertRedirects(post_response, self.login)
        self.assertTrue(User.objects.get(id=4))
        self.assertContains(post_response, text=messages.user_create)

    def test_update_user(self):
        self.client.force_login(self.user2)
        update_user = reverse('update', args=[2])
        """ GET """
        get_response = self.client.get(update_user)
        self.assertEqual(get_response.status_code, 200)
        """ POST """
        post_response = self.client.post(update_user,
                                         self.form_data, follow=True)
        self.assertRedirects(post_response, self.users_list)
        updated_user = User.objects.get(pk=2)
        self.assertEqual(updated_user.username, 'NewN
